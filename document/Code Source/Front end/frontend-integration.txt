// frontend/src/components/SceneToolbar.jsx
// Exemple de modification du composant SceneToolbar existant pour l'intégrer avec l'API

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

function SceneToolbar({ 
  scenes, 
  selectedScenes, 
  selectAllScenes, 
  viewMode, 
  setViewMode,
  onGenerationStart 
}) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [stylePresets, setStylePresets] = useState([]);
  const [showStyleDropdown, setShowStyleDropdown] = useState(false);
  const [comfyStatus, setComfyStatus] = useState('checking');

  // Récupérer les styles disponibles au chargement
  useEffect(() => {
    fetchStyles();
    checkComfyStatus();
    
    // Vérifier le statut de ComfyUI régulièrement
    const interval = setInterval(checkComfyStatus, 30000);
    return () => clearInterval(interval);
  }, []);

  const fetchStyles = async () => {
    try {
      const response = await axios.get(`${API_URL}/styles`);
      if (response.data && response.data.styles) {
        setStylePresets(response.data.styles);
      }
    } catch (error) {
      console.error('Erreur lors de la récupération des styles:', error);
    }
  };

  const checkComfyStatus = async () => {
    try {
      const response = await axios.get(`${API_URL}/status`);
      setComfyStatus(response.data.comfyui_status);
    } catch (error) {
      setComfyStatus('offline');
      console.error('Erreur lors de la vérification du statut:', error);
    }
  };

  const generateStyle = async (styleId) => {
    if (selectedScenes.length === 0) {
      // Afficher notification d'avertissement via le système de notification global
      window.addNotification('Veuillez sélectionner au moins une scène', 'warning');
      return;
    }
    
    if (comfyStatus !== 'online') {
      window.addNotification('ComfyUI n\'est pas disponible actuellement', 'error');
      return;
    }
    
    setIsGenerating(true);
    setShowStyleDropdown(false);
    
    try {
      // Informer le parent que la génération commence
      if (onGenerationStart) onGenerationStart();
      
      window.addNotification(`Génération du style "${stylePresets.find(s => s.id === styleId)?.name}" en cours...`, 'info');
      
      // Appeler l'API pour démarrer la génération
      const response = await axios.post(`${API_URL}/generate`, {
        scene_ids: selectedScenes,
        style: styleId,
        // Les valeurs par défaut pourraient être ajustées dans un menu de configuration avancée
        controlnet_weight: 1.0,
        guidance_scale: 7.5,
        steps: 40
      });
      
      // Récupérer l'ID du job pour suivi
      const jobId = response.data.job_id;
      
      // Démarrer le polling du statut
      pollGenerationStatus(jobId);
      
    } catch (error) {
      setIsGenerating(false);
      window.addNotification('Erreur lors du lancement de la génération', 'error');
      console.error('Erreur de génération:', error);
    }
  };

  const pollGenerationStatus = async (jobId) => {
    try {
      const response = await axios.get(`${API_URL}/generations/${jobId}`);
      const job = response.data;
      
      if (job.status === 'completed') {
        setIsGenerating(false);
        window.addNotification('Génération terminée avec succès', 'success');
        
        // Recharger les scènes pour afficher les images générées
        window.refreshScenes();
      } 
      else if (job.status === 'error') {
        setIsGenerating(false);
        window.addNotification(`Erreur: ${job.message || 'Problème lors de la génération'}`, 'error');
      }
      else if (job.status === 'processing') {
        // Continuer le polling
        setTimeout(() => pollGenerationStatus(jobId), 2000);
      }
    } catch (error) {
      setIsGenerating(false);
      window.addNotification('Erreur lors de la vérification du statut', 'error');
      console.error('Erreur polling:', error);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-sm p-4 mb-6 flex flex-wrap items-center justify-between gap-4">
      <div className="flex items-center space-x-4">
        <div className="flex items-center">
          <input 
            type="checkbox" 
            checked={selectedScenes.length === scenes.length && scenes.length > 0} 
            onChange={selectAllScenes}
            className="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
          />
          <span className="ml-2 text-sm text-gray-700">
            {selectedScenes.length > 0 
              ? `${selectedScenes.length} sélectionné(s)` 
              : 'Tout sélectionner'}
          </span>
        </div>
        
        {selectedScenes.length > 0 && (
          <div className="flex space-x-2">
            <button 
              className="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 rounded-md text-sm flex items-center"
              onClick={() => window.addNotification('Édition par lot', 'info')}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
              Éditer
            </button>
            
            <button 
              className="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 rounded-md text-sm flex items-center"
              