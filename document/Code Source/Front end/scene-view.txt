// frontend/src/components/SceneDetail.jsx
// Composant pour afficher les détails d'une scène et ses versions générées

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

function SceneDetail({ scene, onClose }) {
  const [activeTab, setActiveTab] = useState('original');
  const [versions, setVersions] = useState([]);
  const [selectedVersion, setSelectedVersion] = useState(null);
  const [isExporting, setIsExporting] = useState(false);
  const [isGeneratingVariant, setIsGeneratingVariant] = useState(false);

  useEffect(() => {
    // Si la scène a des images générées, les organiser par style
    if (scene.generated_images && scene.generated_images.length > 0) {
      const sortedVersions = [...scene.generated_images].sort((a, b) => {
        // Trier par timestamp (plus récent d'abord)
        return b.timestamp - a.timestamp;
      });
      setVersions(sortedVersions);
      setSelectedVersion(sortedVersions[0]);
    }
  }, [scene]);

  const generateVariant = async () => {
    if (!selectedVersion) return;
    
    setIsGeneratingVariant(true);
    try {
      const response = await axios.post(`${API_URL}/generate`, {
        scene_ids: [scene.id],
        style: selectedVersion.style,
        controlnet_weight: selectedVersion.parameters.controlnet_weight,
        guidance_scale: selectedVersion.parameters.guidance_scale,
        steps: selectedVersion.parameters.steps
      });
      
      window.addNotification('Génération de variante lancée', 'info');
      
      // Commencer le polling du statut
      const jobId = response.data.job_id;
      pollGenerationStatus(jobId);
    } catch (error) {
      setIsGeneratingVariant(false);
      window.addNotification('Erreur lors de la génération de variante', 'error');
      console.error('Erreur:', error);
    }
  };

  const pollGenerationStatus = async (jobId) => {
    try {
      const response = await axios.get(`${API_URL}/generations/${jobId}`);
      const job = response.data;
      
      if (job.status === 'completed') {
        setIsGeneratingVariant(false);
        window.addNotification('Variante générée avec succès', 'success');
        
        // Recharger les détails de la scène pour voir la nouvelle variante
        refreshSceneDetails();
      } 
      else if (job.status === 'error') {
        setIsGeneratingVariant(false);
        window.addNotification(`Erreur: ${job.message || 'Problème lors de la génération'}`, 'error');
      }
      else if (job.status === 'processing') {
        // Continuer le polling
        setTimeout(() => pollGenerationStatus(jobId), 2000);
      }
    } catch (error) {
      setIsGeneratingVariant(false);
      window.addNotification('Erreur lors de la vérification du statut', 'error');
    }
  };

  const refreshSceneDetails = async () => {
    try {
      const response = await axios.get(`${API_URL}/scenes/${scene.id}`);
      const updatedScene = response.data;
      
      if (updatedScene.generated_images && updatedScene.generated_images.length > 0) {
        const sortedVersions = [...updatedScene.generated_images].sort((a, b) => {
          return b.timestamp - a.timestamp;
        });
        setVersions(sortedVersions);
        setSelectedVersion(sortedVersions[0]);
      }
    } catch (error) {
      console.error('Erreur lors du rafraîchissement:', error);
    }
  };

  const exportToPostProduction = async () => {
    if (!selectedVersion) return;
    
    setIsExporting(true);
    try {
      const response = await axios.post(`${API_URL}/export`, {
        image_paths: [selectedVersion.path],
        format: 'png',
        resize: true
      });
      
      setIsExporting(false);
      window.addNotification(`Exporté avec succès: ${response.data.exported_files.length} fichier(s)`, 'success');
    } catch (error) {
      setIsExporting(false);
      window.addNotification('Erreur lors de l\'export', 'error');
    }
  };

  const getStyleName = (styleId) => {
    const styleMap = {
      'ombre_chinoise': 'Ombres chinoises',
      'laboratoire': 'Laboratoire réaliste',
      'expressionniste': 'Expressionniste',
      'custom': 'Style personnalisé'
    };
    return styleMap[styleId] || styleId;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-6xl h-full max-h-[90vh] flex flex-col">
        <div className="p-6 border-b border-gray-200 flex justify-between items-center">
          <h2 className="text-xl font-semibold text-gray-900">
            {scene.title || `Scène ${scene.sequence_number}-${scene.plan_number}`}
          </h2>
          <button 
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="flex-1 overflow-auto p-6">
          <div className="flex flex-col md:flex-row gap-6">
            {/* Panneau gauche - Informations */}
            <div className="w-full md:w-1/3 space-y-4">
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                <h3 className="font-semibold mb-2">Informations</h3>
                <div className="space-y-2 text-sm">
                  <div>
                    <span className="font-medium text-gray-700">Séquence:</span>
                    <span className="ml-2">{scene.sequence_number}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Plan:</span>
                    <span className="ml-2">{scene.plan_number}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Type de plan:</span>
                    <span className="ml-2">{scene.type_plan || "Non spécifié"}</span>
                  </div>
                </div>
              </div>
              
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                <h3 className="font-semibold mb-2">Contenu</h3>
                <div className="space-y-2">
                  {scene.location && (
                    <div className="location-highlight p-2 rounded text-xs">
                      {scene.location}
                    </div>
                  )}
                  {scene.dialogue && (
                    <div className="dialogue-box p-2 rounded text-xs">
                      {scene.dialogue}
                    </div>
                  )}
                  {scene.indication && (
                    <div className="indication-box p-2 rounded text-xs">
                      {scene.indication}
                    </div>
                  )}
                </div>
              </div>
              
              {versions.length > 0 && (
                <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                  <h3 className="font-semibold mb-2">Versions générées</h3>
                  <div className="space-y-2">
                    {versions.map((version, index) => (
                      <button
                        key={index}
                        onClick={() => setSelectedVersion(version)}
                        className={`w-full text-left p-2 rounded-md flex items-center ${selectedVersion === version ? 'bg-blue-100 border border-blue-300' : 'hover:bg-gray-100'}`}
                      >
                        <div className="h-12 w-12 bg-gray-200 rounded flex-shrink-0 overflow-hidden mr-3">
                          <img
                            src={`${API_URL}/files/${version.path.split('/').pop()}`}
                            alt="Miniature"
                            className="h-full w-full object-cover"
                          />
                        </div>
                        <div>
                          <p className="text-sm font-medium">{getStyleName(version.style)}</p>
                          <p className="text-xs text-gray-500">
                            {new Date(version.timestamp * 1000).toLocaleString()}
                          </p>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            {/* Panneau droit - Visualisation */}
            <div className="w-full md:w-2/3">
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                <div className="flex border-b border-gray-200 mb-4">
                  <button
                    className={`px-4 py-2 font-medium text-sm ${activeTab === 'original' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
                    onClick={() => setActiveTab('original')}
                  >
                    Original
                  </button>
                  {versions.length > 0 && (
                    <button
                      className={`px-4 py-2 font-medium text-sm ${activeTab === 'generated' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
                      onClick={() => setActiveTab('generated')}
                    >
                      Généré
                    </button>
                  )}
                  {versions.length > 0 && (
                    <button
                      className={`px-4 py-2 font-medium text-sm ${activeTab === 'compare' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
                      onClick={() => setActiveTab('compare')}
                    >
                      Comparaison
                    </button>
                  )}
                </div>
                
                <div className="image-viewer">
                  {activeTab === 'original' && (
                    <div>
                      <img
                        src={`${API_URL}/files/${scene.image_path.split('/').pop()}`}
                        alt="Image originale"
                        className="w-full h-auto max-h-[60vh] object-contain rounded-md border border-gray-300"
                      />
                      <p className="mt-2 text-sm text-gray-500 text-center">Image originale du storyboard</p>
                    </div>
                  )}
                  
                  {activeTab === 'generated' && selectedVersion && (
                    <div>
                      <img
                        src={`${API_URL}/files/${selectedVersion.path.split('/').pop()}`}
                        alt="Image générée"
                        className="w-full h-auto max-h-[60vh] object-contain rounded-md border border-gray-300"
                      />
                      <div className="mt-2 text-sm text-gray-500">
                        <p className="text-center font-medium">{getStyleName(selectedVersion.style)}</p>
                        <div className="mt-2 grid grid-cols-4 gap-2 text-xs">
                          <div className="p-1 bg-gray-100 rounded">
                            <span className="font-medium">Seed: </span>
                            {selectedVersion.parameters.seed}
                          </div>
                          <div className="p-1 bg-gray-100 rounded">
                            <span className="font-medium">CFG: </span>
                            {selectedVersion.parameters.guidance_scale}
                          </div>
                          <div className="p-1 bg-gray-100 rounded">
                            <span className="font-medium">Steps: </span>
                            {selectedVersion.parameters.steps}
                          </div>
                          <div className="p-1 bg-gray-100 rounded">
                            <span className="font-medium">CN Weight: </span>
                            {selectedVersion.parameters.controlnet_weight}
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {activeTab === 'compare' && selectedVersion && (
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <img
                          src={`${API_URL}/files/${scene.image_path.split('/').pop()}`}
                          alt="Image originale"
                          className="w-full h-auto max-h-[40vh] object-contain rounded-md border border-gray-300"
                        />
                        <p className="mt-1 text-xs text-gray-500 text-center">Original</p>
                      </div>
                      <div>
                        <img
                          src={`${API_URL}/files/${selectedVersion.path.split('/').pop()}`}
                          alt="Image générée"
                          className="w-full h-auto max-h-[40vh] object-contain rounded-md border border-gray-300"
                        />
                        <p className="mt-1 text-xs text-gray-500 text-center">{getStyleName(selectedVersion.style)}</p>
                      </div>
                    </div>
                  )}
                </div>
                
                {selectedVersion && (
                  <div className="mt-4 flex justify-end space-x-3">
                    <button
                      className="px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-md text-sm flex items-center"
                      onClick={generateVariant}
                      disabled={isGeneratingVariant}
                    >
                      {isGeneratingVariant ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-700" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Génération...
                        </>
                      ) : (
                        <>
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                          </svg>
                          Générer variante
                        </>
                      )}
                    </button>
                    <button
                      className="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md text-sm flex items-center"
                      onClick={exportToPostProduction}
                      disabled={isExporting}
                    >
                      {isExporting ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Export...
                        </>
                      ) : (
                        <>
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                          </svg>
                          Exporter pour post-prod
                        </>
                      )}
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default SceneDetail;
              